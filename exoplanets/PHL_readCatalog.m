%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Alex\Documents\MATLAB\exoplanets\phl_hec_all_confirmed.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/09/20 16:59:30

%% Initialize variables.
filename = 'C:\Users\Alex\Documents\MATLAB\exoplanets\phl_hec_all_confirmed.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[9,10,12,13,14,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32,33,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [9,10,12,13,14,15,16,17,18,19,20,21,25,26,27,28,29,30,31,32,33,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68]);
rawCellColumns = raw(:, [1,2,3,4,5,6,7,8,11,22,23,24,34,37,38,67]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
PName = rawCellColumns(:, 1);
PNameKepler = rawCellColumns(:, 2);
PNameKOI = rawCellColumns(:, 3);
PZoneClass = rawCellColumns(:, 4);
PMassClass = rawCellColumns(:, 5);
PCompositionClass = rawCellColumns(:, 6);
PAtmosphereClass = rawCellColumns(:, 7);
PHabitableClass = rawCellColumns(:, 8);
PMinMassEU = cell2mat(rawNumericColumns(:, 1));
PMassEU = cell2mat(rawNumericColumns(:, 2));
PMaxMassEU = rawCellColumns(:, 9);
PRadiusEU = cell2mat(rawNumericColumns(:, 3));
PDensityEU = cell2mat(rawNumericColumns(:, 4));
PGravityEU = cell2mat(rawNumericColumns(:, 5));
PEscVelEU = cell2mat(rawNumericColumns(:, 6));
PSFluxMinEU = cell2mat(rawNumericColumns(:, 7));
PSFluxMeanEU = cell2mat(rawNumericColumns(:, 8));
PSFluxMaxEU = cell2mat(rawNumericColumns(:, 9));
PTeqMinK = cell2mat(rawNumericColumns(:, 10));
PTeqMeanK = cell2mat(rawNumericColumns(:, 11));
PTeqMaxK = cell2mat(rawNumericColumns(:, 12));
PTsMinK = rawCellColumns(:, 10);
PTsMeanK = rawCellColumns(:, 11);
PTsMaxK = rawCellColumns(:, 12);
PSurfPressEU = cell2mat(rawNumericColumns(:, 13));
PMag = cell2mat(rawNumericColumns(:, 14));
PApparSizedeg = cell2mat(rawNumericColumns(:, 15));
PPerioddays = cell2mat(rawNumericColumns(:, 16));
PSemMajorAxisAU = cell2mat(rawNumericColumns(:, 17));
PEccentricity = cell2mat(rawNumericColumns(:, 18));
PMeanDistanceAU = cell2mat(rawNumericColumns(:, 19));
PInclinationdeg = cell2mat(rawNumericColumns(:, 20));
POmegadeg = cell2mat(rawNumericColumns(:, 21));
SName = rawCellColumns(:, 13);
SNameHD = cell2mat(rawNumericColumns(:, 22));
SNameHIP = cell2mat(rawNumericColumns(:, 23));
SConstellation = rawCellColumns(:, 14);
SType = rawCellColumns(:, 15);
SMassSU = cell2mat(rawNumericColumns(:, 24));
SRadiusSU = cell2mat(rawNumericColumns(:, 25));
STeffK = cell2mat(rawNumericColumns(:, 26));
SLuminositySU = cell2mat(rawNumericColumns(:, 27));
SFeH = cell2mat(rawNumericColumns(:, 28));
SAgeGyrs = cell2mat(rawNumericColumns(:, 29));
SApparMag = cell2mat(rawNumericColumns(:, 30));
SDistancepc = cell2mat(rawNumericColumns(:, 31));
SRAhrs = cell2mat(rawNumericColumns(:, 32));
SDECdeg = cell2mat(rawNumericColumns(:, 33));
SMagfromPlanet = cell2mat(rawNumericColumns(:, 34));
SSizefromPlanetdeg = cell2mat(rawNumericColumns(:, 35));
SNoPlanets = cell2mat(rawNumericColumns(:, 36));
SNoPlanetsHZ = cell2mat(rawNumericColumns(:, 37));
SHabZoneMinAU = cell2mat(rawNumericColumns(:, 38));
SHabZoneMaxAU = cell2mat(rawNumericColumns(:, 39));
PHZD = cell2mat(rawNumericColumns(:, 40));
PHZC = cell2mat(rawNumericColumns(:, 41));
PHZA = cell2mat(rawNumericColumns(:, 42));
PHZI = cell2mat(rawNumericColumns(:, 43));
PSPH = cell2mat(rawNumericColumns(:, 44));
PIntESI = cell2mat(rawNumericColumns(:, 45));
PSurfESI = cell2mat(rawNumericColumns(:, 46));
PESI = cell2mat(rawNumericColumns(:, 47));
SHabCat = cell2mat(rawNumericColumns(:, 48));
PHabitable = cell2mat(rawNumericColumns(:, 49));
PHabMoon = cell2mat(rawNumericColumns(:, 50));
PConfirmed = cell2mat(rawNumericColumns(:, 51));
PDiscMethod = rawCellColumns(:, 16);
PDiscYear = cell2mat(rawNumericColumns(:, 52));


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;


% %%
save ('PHL_radius', 'PRadiusEU'); % promienie Ziemi
save ('PHL_star_distance', 'SDistancepc'); % parseki
save ('PHL_name', 'PName');
save ('PHL_ESI', 'PESI');
save ('PSemMajorAxisAU', 'PSemMajorAxisAU');
